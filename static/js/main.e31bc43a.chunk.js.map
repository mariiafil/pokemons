{"version":3,"sources":["redux/actions.ts","redux/reducers/loadNumberReducer.ts","redux/reducers/loaderReducer.ts","redux/reducers/pokemonsReducer.ts","redux/reducers/idReducer.ts","redux/reducers/queryReducer.ts","redux/reducers/rootReducer.ts","redux/store.ts","components/Header/Header.tsx","components/Spinner/Spinner.tsx","components/List/List.tsx","api/getData.ts","api/getImgUrl.ts","components/Details/Details.tsx","api/createId.ts","App.tsx","index.tsx"],"names":["type","setIsLoading","status","isLoading","loadNumberState","loadNumber","loadState","pokemonsState","pokemons","idState","id","queryState","query","rootReducer","combineReducers","loaderReducer","state","action","loadNumberReducer","pokemonsReducer","pokemon","idReducer","queryReducer","store","createStore","applyMiddleware","thunk","Header","className","Spinner","color","height","width","timeout","mapDispatchToProps","loadPokemons","number","dispatch","quantity","fetch","then","response","json","data","results","forEach","url","pokData","info","every","item","newPokemon","name","image","types","map","attack","stats","base_stat","speed","spDefense","spAttack","defense","hp","moves","length","weight","setPokemons","finally","setLoad","setId","setQuery","List","connect","load","useEffect","visibleCards","useMemo","sort","a","b","filter","includes","onChange","e","target","value","handleSelect","defaultValue","key","onClick","src","alt","Details","find","num","str","String","createId","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e31bc43a.chunk.js","sourcesContent":["import { ThunkDispatch } from 'redux-thunk';\nimport { Action } from 'redux';\nimport { getData } from '../api/getData';\nimport { getImgUrl } from '../api/getImgUrl';\n\nexport const type = {\n  SET_POKEMONS: 'SET_POKEMONS',\n  SET_LOAD_NUMBER: 'SET_LOAD_NUMBER',\n  SET_IS_LOADING: 'SET_IS_LOADING',\n  SET_ID: 'SET_ID',\n  SET_QUERY: 'SET_QUERY',\n};\n\nexport const setQuery = (query: string) => ({\n  type: type.SET_QUERY,\n  query,\n});\n\nexport const setIsLoading = (status: boolean) => ({\n  type: type.SET_IS_LOADING,\n  isLoading: status,\n});\n\nexport const setId = (id: number) => ({\n  type: type.SET_ID,\n  id,\n});\n\nexport const setLoad = () => ({\n  type: type.SET_LOAD_NUMBER,\n});\n\nexport const setPokemons = (pokemon: Pokemon) => ({\n  type: type.SET_POKEMONS,\n  pokemon,\n});\n\nexport const loadPokemons = (number: number, pokemons: Pokemon[]) => {\n  return (dispatch:\n      ThunkDispatch<PokemonsState&LoadNumberState,\n      unknown,\n      Action\n    >) => {\n    dispatch(setIsLoading(true));\n\n    getData(number)\n      .then(data => {\n        data.results.forEach((pokemon: { url: string }) => {\n          fetch(pokemon.url)\n            .then(pokData => pokData.json()\n              .then(info => {\n                if (pokemons.every(item => item.id !== info.id)) {\n                  const newPokemon = {\n                    id: info.id,\n                    name: info.name,\n                    image: getImgUrl(info.id),\n                    types: info.types\n                      .map((item: { type: {name: string} }) => item.type.name),\n                    attack: info.stats[4].base_stat,\n                    speed: info.stats[0].base_stat,\n                    spDefense: info.stats[1].base_stat,\n                    spAttack: info.stats[2].base_stat,\n                    defense: info.stats[3].base_stat,\n                    hp: info.stats[5].base_stat,\n                    moves: info.moves.length,\n                    weight: info.weight,\n                  };\n\n                  dispatch(setPokemons(newPokemon));\n                }\n              }));\n        });\n      }).finally(() => dispatch(setIsLoading(false)));\n  };\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst loadNumberState: LoadNumberState = {\n  loadNumber: 12,\n};\n\nexport const loadNumberReducer = (\n  state = loadNumberState, action: AnyAction,\n): LoadNumberState => {\n  switch (action.type) {\n    case type.SET_LOAD_NUMBER:\n      return {\n        loadNumber: state.loadNumber + 12,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst loadState: LoadingState = {\n  isLoading: false,\n};\n\nexport const loaderReducer = (\n  state = loadState, action: AnyAction,\n): LoadingState => {\n  switch (action.type) {\n    case type.SET_IS_LOADING:\n      return {\n        isLoading: action.isLoading,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst pokemonsState: PokemonsState = {\n  pokemons: [],\n};\n\nexport const pokemonsReducer = (\n  state = pokemonsState, action: AnyAction,\n): PokemonsState => {\n  switch (action.type) {\n    case type.SET_POKEMONS:\n      return {\n        pokemons: [...state.pokemons, action.pokemon],\n      };\n\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst idState: IdState = {\n  id: null,\n};\n\nexport const idReducer = (\n  state = idState, action: AnyAction,\n): IdState => {\n  switch (action.type) {\n    case type.SET_ID:\n      return {\n        id: action.id,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst queryState: QueryState = {\n  query: 'all',\n};\n\nexport const queryReducer = (\n  state = queryState, action: AnyAction,\n): QueryState => {\n  switch (action.type) {\n    case type.SET_QUERY:\n      return {\n        query: action.query,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { loadNumberReducer } from './loadNumberReducer';\nimport { loaderReducer } from './loaderReducer';\nimport { pokemonsReducer } from './pokemonsReducer';\nimport { idReducer } from './idReducer';\nimport { queryReducer } from './queryReducer';\n\nexport const rootReducer = combineReducers({\n  loaderReducer,\n  loadNumberReducer,\n  pokemonsReducer,\n  idReducer,\n  queryReducer,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducers/rootReducer';\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n","import React, { FC } from 'react';\nimport './header.scss';\n\nexport const Header: FC = () => (\n  <header className=\"header\">\n    <h1 className=\"header__title\">Pokedex</h1>\n  </header>\n);\n","import React from 'react';\nimport Loader from 'react-loader-spinner';\nimport './spinner.scss';\n\nexport const Spinner = () => (\n  <div className=\"loader\">\n    <Loader\n      type=\"Hearts\"\n      color=\"#0adbf7\"\n      height={100}\n      width={100}\n      timeout={5000}\n    />\n  </div>\n);\n","import React, { FC, useEffect, useMemo, ChangeEvent } from 'react';\nimport { connect } from 'react-redux';\nimport './list.scss';\nimport { Spinner } from '../Spinner/Spinner';\nimport * as actions from '../../redux/actions';\n\ninterface Props {\n  pokemons: Pokemon[];\n  load: number;\n  isLoading: boolean;\n  query: string;\n  loadPokemons: (number: number, pokemons: Pokemon[]) => void;\n  setLoad: () => void;\n  setId: (id: number) => void;\n  setQuery: (query: string) => void;\n}\n\nexport const ListTemplate: FC<Props> = ({\n  pokemons,\n  load,\n  isLoading,\n  query,\n  loadPokemons,\n  setLoad,\n  setId,\n  setQuery,\n}) => {\n  useEffect(() => {\n    loadPokemons(load, pokemons);\n  }, [load]);\n\n  const handleLoad = () => {\n    setLoad();\n  };\n\n  const handleInfo = (id: number) => {\n    setId(id);\n  };\n\n  const handleSelect = (e: ChangeEvent<HTMLSelectElement>) => {\n    setQuery(e.target.value);\n  };\n\n  const visibleCards = useMemo(() => {\n    if (query === 'all') {\n      return pokemons.sort((a, b) => a.id - b.id);\n    }\n\n    return pokemons.filter(item => item.types.includes(query));\n  }, [query, pokemons]);\n\n  return (\n    <main className=\"main\">\n      {isLoading ? <Spinner /> : (\n        <>\n          <select\n            name=\"type\"\n            className=\"main__select\"\n            onChange={(e) => handleSelect(e)}\n            defaultValue={query}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"poison\">Poison</option>\n            <option value=\"grass\">Grass</option>\n            <option value=\"fire\">Fire</option>\n            <option value=\"water\">Water</option>\n            <option value=\"ground\">Ground</option>\n            <option value=\"bug\">Bug</option>\n            <option value=\"normal\">Normal</option>\n          </select>\n          <ul className=\"main__list\">\n            {visibleCards.map(pokemon => (\n              <li key={pokemon.id} className=\"main__item\">\n                <button\n                  type=\"button\"\n                  className=\"main__item-button\"\n                  onClick={() => handleInfo(pokemon.id)}\n                >\n                  <img\n                    src={pokemon.image}\n                    alt=\"pokemon\"\n                    className=\"main__img\"\n                  />\n                  <h3 className=\"main__header\">{pokemon.name}</h3>\n                  <ul className=\"main__types\">\n                    {pokemon.types.map(type => (\n                      <li key={type} className={`main__type ${type}`}>\n                        {type}\n                      </li>\n                    ))}\n                  </ul>\n                </button>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      <button\n        type=\"button\"\n        onClick={handleLoad}\n        className=\"main__button\"\n      >\n        Load more\n      </button>\n    </main>\n  );\n};\n\nconst mapStateToProps = (\n  state: {\n    pokemonsReducer: PokemonsState;\n    loaderReducer: LoadingState;\n    loadNumberReducer: LoadNumberState;\n    queryReducer: QueryState;\n  },\n) => ({\n  pokemons: state.pokemonsReducer.pokemons,\n  load: state.loadNumberReducer.loadNumber,\n  isLoading: state.loaderReducer.isLoading,\n  query: state.queryReducer.query,\n});\n\nconst mapDispatchToProps = {\n  loadPokemons: actions.loadPokemons,\n  setLoad: actions.setLoad,\n  setId: actions.setId,\n  setQuery: actions.setQuery,\n};\n\nexport const List = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ListTemplate);\n","export const getData = (quantity: number) => {\n  return fetch(`https://pokeapi.co/api/v2/pokemon?limit=${quantity}`)\n    .then(response => response.json());\n};\n","export const getImgUrl\n= (id: number) => `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport './details.scss';\nimport { createId } from '../../api/createId';\n\ninterface Props {\n  pokemons: Pokemon[];\n  id: number|null;\n}\nexport const DetailsTemplate: FC<Props> = ({ pokemons, id }) => {\n  const pokemon = pokemons.find(item => item.id === id);\n\n  return (\n    <div className=\"details\">\n      {pokemon ? (\n        <div className=\"details__card\">\n          <img\n            className=\"details__img\"\n            src={pokemon.image}\n            alt={pokemon.name}\n          />\n          <h3 className=\"details__title\">\n            {createId(pokemon.id)}\n            {' '}\n            {pokemon.name}\n          </h3>\n          <ul className=\"details__list\">\n            <li className=\"details__item\">\n              <p className=\"details__option\">Title</p>\n              <ul className=\"details__option-list\">\n                {pokemon.types.map(item => (\n                  <li className=\"details__option-item\" key={id + item}>\n                    {item}\n                  </li>\n                ))}\n              </ul>\n            </li>\n            <li className=\"details__item\">\n              <p className=\"details__option\">Attack</p>\n              <p className=\"details__option-list\">\n                {pokemon.attack}\n              </p>\n            </li>\n            <li className=\"details__item\">\n              <p className=\"details__option\">Defense</p>\n              <p className=\"details__option-list\">\n                {pokemon.defense}\n              </p>\n            </li>\n            <li className=\"details__item\">\n              <p className=\"details__option\">HP</p>\n              <p className=\"details__option-list\">\n                {pokemon.hp}\n              </p>\n            </li>\n            <li className=\"details__item\">\n              <p className=\"details__option\">SP Attack</p>\n              <p className=\"details__option-list\">\n                {pokemon.spAttack}\n              </p>\n            </li>\n            <li className=\"details__item\">\n              <p className=\"details__option\">SP Defense</p>\n              <p className=\"details__option-list\">\n                {pokemon.spDefense}\n              </p>\n            </li>\n            <li className=\"details__item\">\n              <p className=\"details__option\">Speed</p>\n              <p className=\"details__option-list\">\n                {pokemon.speed}\n              </p>\n            </li>\n            <li className=\"details__item\">\n              <p className=\"details__option\">Weight</p>\n              <p className=\"details__option-list\">\n                {pokemon.weight}\n              </p>\n            </li>\n            <li className=\"details__item\">\n              <p className=\"details__option\">Total moves</p>\n              <p className=\"details__option-list\">\n                {pokemon.moves}\n              </p>\n            </li>\n          </ul>\n        </div>\n      ) : (\n        <p className=\"details__choose\">Please, choose Pokemon</p>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (\n  state: {\n    pokemonsReducer: PokemonsState;\n    idReducer: IdState;\n  },\n) => ({\n  pokemons: state.pokemonsReducer.pokemons,\n  id: state.idReducer.id,\n});\n\nexport const Details = connect(\n  mapStateToProps,\n)(DetailsTemplate);\n","export const createId = (num: number) => {\n  let str = String(num);\n\n  while (str.length < 3) {\n    str = `0${str}`;\n  }\n\n  return `#${str}`;\n};\n","import React, { FC } from 'react';\nimport { Header } from './components/Header/Header';\nimport { List } from './components/List/List';\nimport './app.scss';\nimport { Details } from './components/Details/Details';\n\nconst App: FC = () => (\n  <div>\n    <Header />\n    <section className=\"main-section\">\n      <List />\n      <Details />\n    </section>\n\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}